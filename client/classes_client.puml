@startuml classes_client
set namespaceSeparator none
class "DefaultClient" as SmartNoteAssistant.client.telegram._default_client.DefaultClient #77AADD {
  API_BASE_URL
  NOTION_AUTH_URL
  SERVER_URL : NoneType
  TELEBOT_TOKEN : NoneType
  authorization_client
  google_task_client
  llm
  notion_client
  check_google_authorization(chat_id: int) -> bool
  check_notion_authorization(chat_id: int) -> bool
  delete_notes(chat_id, note_token) -> str
  delete_reminder(chat_id, token) -> str
  extract_note_idx(note_idx_text) -> int
  get_google_authorization_url(chat_id: int) -> str
  get_jobs_from_start(update: Update) -> list
  get_note_content(chat_id, note_token) -> str
  get_note_page_content(chat_id: int, starting_point: str | None) -> ListNotes
  get_notion_authorization_url(chat_id: int) -> str
  get_reminder_content(chat_id, reminder_token) -> Tuple[str, str, str]
  get_reminder_content_at_page(chat_id, page_token) -> str
  get_reminder_page_content(chat_id, page_token) -> ListTask | None
  get_total_note_pages(chat_id: int) -> int
  get_total_reminder_pages(chat_id: int) -> int
  handle_receive_notion_database_token(chat_id: int, database_token: str) -> str
  process_prompt(user_data: UserData, prompt_text: str) -> Tuple[str, str]
  receive_user_timezone_from_text(user_data: UserData, timezone_text: str) -> str
  remove_task(chat_id: int, token: str) -> None
  save_note(user_data: UserData, note_text) -> str
  save_note_detail(chat_id, note_idx, detail_text)
  save_note_title(chat_id, note_token, title_text)
  save_remind(user_data: UserData, remind_text) -> str
  save_reminder_detail(chat_id: int, reminder_token: str, detail_text: str) -> str
  save_reminder_time(user_data, time_text: str) -> str
  save_reminder_title(chat_id: int, reminder_token: str, title_text: str) -> str
  {abstract}user_subscribe(chat_id)
}
@enduml
